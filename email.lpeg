
local dump = require "org.conman.table".dump
local lpeg = require "lpeg"
local re   = require "re"

local P  = lpeg.P
local S  = lpeg.S
local R  = lpeg.R
local V  = lpeg.V
local C  = lpeg.C
local Cc = lpeg.Cc
local Cf = lpeg.Cf
local Cg = lpeg.Cg
local Ct = lpeg.Ct

-- ***********************************************************************

local function doset(t,i)

  local function append(t,l)
    if type(l) == 'table' and #l > 0 then
      for i = 1 , #l do
        t[#t + 1] = l[i]
      end
    else
      t[#t + 1] = l
    end
  end

  for name,value in pairs(i) do
    if t[name] == nil then
      t[name] = value
    elseif type(t[name]) == 'table' then
      append(t[name],value)
    else
      local r = { t[name] }
      append(r,value)
      t[name] = r
    end
  end
  return t
end

-- *******************************************************************

local VCHAR      = R"!~"
local WSP        = S" \t"
local SP         = P" "
local CRLF       = P"\r"^-1 * P"\n"
local ctext      = R("!'" , "*[" , "]~")
local qtext      = R("!!" , "#[" , "]~")
local dtext      = R("!Z" , "^!")
local theheaders = Cf(Ct"" * V"headers"^1,doset) * CRLF

local group = 
  Cf(
       V"CFWS"^-1
     * C(V"display_name")
     * Cf(
           Ct"" * P":" * V"group_list"^-1 + Cc(""),
           function(a,b)
             a[#a + 1] = b
             return a
           end
         ),
     function(a,b)
       return { [a] = b }
     end
  )
   * P";" * V"CFWS"^-1

-- ********************************************************************

G = --[[ lpeg/re ]] [[

email		<- %theheaders
headers		<- 
		   {:from:        fromhdr        :} -> {}	-- RFC-5322
		/  {:to:	  tohdr          :} -> {}	-- RFC-5322
		/  {:subject:     subjecthdr     :} -> {}	-- RFC-5322
		/  {:date:        datehdr        :} -> {}	-- RFC-5322
		/  {:cc:          cchdr          :} -> {}	-- RFC-5322
		/  {:bcc:         bcchdr         :} -> {}	-- RFC-5322
		/  {:comment:     commenthdr     :} -> {}	-- RFC-5322
		/  {:keywords:    keywordshdr    :} -> {}	-- RFC-5322
		/  {:message_id:  message_idhdr  :} -> {}	-- RFC-5322
		/  {:in_reply_to: in_reply_tohdr :} -> {}	-- RFC-5322
		/  {:references:  referenceshdr  :} -> {}	-- RFC-5322
		/  {:reply_to:    reply_tohdr    :} -> {}	-- RFC-5322
		/  {:sender:      senderhdr      :} -> {}	-- RFC-5322
		/  {:received:	  receivedhdr    :} -> {}	-- RFC-5322, RFC-5321
		/  {:return_path: return_pathhdr :} -> {}	-- RFC-5322, RCC-5321

fromhdr		<- FROM        ':' mailbox_list -> {}      %CRLF
subjecthdr	<- SUBJECT     ':' unstructured => cleanup %CRLF
datehdr		<- DATE        ':' date_time -> {}         %CRLF
tohdr		<- TO          ':' address_list -> {} %CRLF
cchdr		<- CC          ':' address_list -> {} %CRLF
bcchdr		<- BCC         ':' address_list -> {} %CRLF
commenthdr	<- COMMENT     ':' unstructured => cleanup %CRLF
keywordshdr	<- KEYWORDS    ':' (phrase (',' phrase)* ) -> {} %CRLF
message_idhdr	<- MESSAGE_ID  ':' msg_id             %CRLF
in_reply_tohdr	<- IN_REPLY_TO ':' msg_id+      -> {} %CRLF
referenceshdr	<- REFERENCES  ':' msg_id+      -> {} %CRLF
reply_tohdr	<- REPLY_TO    ':' address_list -> {} %CRLF
senderhdr	<- SENDER      ':' mailbox      -> {} %CRLF
receivedhdr	<- RECEIVED    ':' FWS stamp    -> {} %CRLF
return_pathhdr	<- RETURN_PATH ':' FWS reverse_path -> {} %CRLF

reverse_path	<- path /  "<>"

stamp		<- (
		     from_domain? by_domain opt_info CFWS? 
		     ";" {:when: date_time -> {} :}
                   ) -> {}
from_domain	<- FROM    FWS {:from: extended_domain :}
by_domain	<- CFWS BY FWS {:by:   extended_domain :}
extended_domain	<- domain
		/  domain FWS "(" tcp_info ")"
		/  address_literal FWS "(" tcp_info ")"
tcp_info	<- address_literal
		/  domain FWS address_literal
opt_info	<- via? with? id? for? arc?
via		<- CFWS VIA FWS {:link: link :}
with		<- CFWS WITH FWS {:with: protocol :}
id		<- CFWS ID FWS {:id: (atom !'.' / msg_id / dot_atom_text) :}
for		<- CFWS FOR FWS {:for: (path / mailbox) :}
arc		<- CFWS atom FWS word
link		<- TCP / addtl_link
addtl_link	<- atom
protocol	<- ESMTP !atext
		/  SMTP  !atext
		/  attdl_protocol
attdl_protocol	<- atom
path		<- "<" (adl ":")? mailbox ">"
adl		<- at_domain ("," at_domain)*
at_domain	<- "@" domain

BY		<- [Bb][Yy]
VIA		<- [Vv][Ii][Aa]
WITH		<- [Ww][Ii][Tt][Hh]
FOR		<- [Ff][Oo][Rr]
TCP		<- [Tt][Cc][Pp]
ESMTP		<- [Ee] SMTP
SMTP		<- [Ss][Mm][Tt][Pp]
ID		<- [Ii][Dd]

msg_id		<- CFWS? "<" { id_left "@" id_right } ">" CFWS?
id_left		<- dot_atom_text
id_right	<- dot_atom_text / no_fold_literal
no_fold_literal	<- "[" %dtext* "]"

date_time	<- ( {:weekday: day_of_week :} "," )? thedate time CFWS?
day_of_week	<- FWS { day_name }
day_name	<- 'Mon' / 'Tue' / 'Wed' / 'Thu' / 'Fri' / 'Sat' / 'Sun'
thedate		<- day month year
day		<- FWS {:day: %d^+1 -> tonumber :} FWS
month		<- {:month: 
		   ( 
			'Jan' / 'Feb' / 'Mar' / 'Apr' 
		      / 'May' / 'Jun' / 'Jul' / 'Aug' 
		      / 'Sep' / 'Oct' / 'Nov' / 'Dec'
		   ) -> monthtrans :}
year		<- FWS {:year: %d^4 -> tonumber :} FWS
time		<- time_of_day zone
time_of_day	<- hour ":" min (":" second)?
hour		<- {:hour: %d%d -> tonumber :}
min		<- {:min:  %d%d -> tonumber :}
second		<- {:sec:  %d%d -> tonumber :}
zone		<- FWS {:zone: (("+" / "-") %d^4) -> tozone:}

unstructured	<- FWS? { (FWS? %VCHAR)* } %WSP*
phrase		<- word+
word		<- atom / quoted_string

quoted_string	<- CFWS? '"' ((FWS? qcontent)* => cleanup) FWS? '"' CFWS?
qcontent	<- %qtext / quoted_pair
quoted_pair	<- "\" (%VCHAR / %WSP)

atom		<- CFWS? {atext+} CFWS?

atext		<- [A-Za-z]
		/  [0-9]
		/  "!"
		/  "#"
		/  "$"
		/  "%"
		/  "&"
		/  "'"
		/  "*"
		/  "+"
		/  "-"
		/  "/"
		/  "="
		/  "?"
		/  "^"
		/  "_"
		/  "`"
		/  "{"
		/  "|"
		/  "}"
		/  "~"

dot_atom_text	<- atext+ ('.' atext+)*
dot_atom	<- CFWS? { dot_atom_text } CFWS?
FWS		<- (%WSP* %CRLF)? %WSP+
CFWS		<- (FWS? comment)? FWS?
		/  FWS
comment		<- "(" (FWS? ccontent)* FWS? ")"
ccontent	<- %ctext / quoted_pair / comment

address_list	<- address ("," address)*
address		<- mailbox / %group
group_list	<- mailbox_list / CFWS
mailbox_list	<- mailbox ("," mailbox)*
mailbox		<- (name_addr / addr_spec) -> {}
name_addr	<- {:name: display_name? :} angle_addr
display_name	<- phrase+ -> {} -> merge
angle_addr	<- CFWS? "<" addr_spec ">" CFWS?
addr_spec	<- {:address: (local_part "@" domain) -> merge_addr :}
local_part	<- dot_atom / quoted_string
domain		<- dot_atom / domain_literal
domain_literal	<- CFWS? "[" (FWS? %dtext)* FWS? "]" CFWS?
address_literal	<- "[" %dtext* "]"

FROM		<- [Ff][Rr][Oo][Mm]
TO		<- [Tt][Oo]
SUBJECT		<- [Ss][Uu][Bb][Jj][Ee][Cc][Tt]
DATE		<- [Dd][Aa][Tt][Ee]
CC		<- [Cc][Cc]
BCC		<- [Bb][Cc][Cc]
REPLY_TO	<- [Rr][Ee][Pp][Ll][Yy] "-" TO
COMMENT		<- [Cc][Oo][Mm][Mm][Ee][Nn][Tt]
KEYWORDS	<- [Kk][Ee][Yy][Ww][Oo][Rr][Dd][Ss]
MESSAGE_ID	<- [Mm][Ee][Ss][Ss][Aa][Gg][Ee] "-" [Ii][Dd]
IN_REPLY_TO	<- [Ii][Nn] "-" REPLY_TO
REFERENCES	<- [Rr][Ee][Ff][Ee][Rr][Ee][Nn][Cc][Ee][Ss]
SENDER		<- [Ss][Ee][Nn][Dd][Ee][Rr]
RECEIVED	<- [Rr][Ee][Cc][Ee][Ii][Vv][Ee][Dd]
RETURN_PATH	<- [Rr][Ee][Tt][Uu][Rr][Nn] "-" [Pp][Aa][Tt][Hh]

]]

R =
{
  VCHAR      = VCHAR,
  WSP        = WSP,
  SP         = SP,
  CRLF       = CRLF,
  ctext      = ctext,
  qtext      = qtext,
  dtext      = dtext,
  theheaders = theheaders,
  group      = group,

  tonumber = tonumber,
  
  merge_addr = function(l,d)
    return l .. "@" .. d
  end,

  monthtrans = function(cap)
    local trans =
    {
      Jan = 1 , Feb =  2 , Mar =  3 , Apr =  4 ,
      May = 5 , Jun =  6 , Jul =  7 , Aug =  8 ,
      Sep = 9 , Oct = 10 , Nov = 11 , Dec = 12
    }
    
    return trans[cap]
  end,
  
  merge = function(cap)
    return table.concat(cap," ")
  end,

  tozone = function(cap)
    local hour = tonumber(cap:sub(2,3)) * 3600
    local min  = tonumber(cap:sub(4,5))
    local sec  = hour + min

    if cap:sub(1,1) == '-' then
      return -sec
    else
      return sec
    end
  end,

  cleanup = function(subject,position,capture)
    local new = capture:gsub("\n","")
    new = new:gsub([[\.]],function(x) return x:sub(2,2) end)
    new = new:gsub("\t"," ")
    return position,new
  end,

  ddt = function(s,p,c)
    print(">>>",p,c)
    if type(c) == 'table' then
      dump("c",c)
    end
    return p
  end,
};

email = re.compile(G,R)

-- **********************************************************************

TEST1 = [[
Return-Path: <lua-l-bounces@lists.lua.org>
Received: from flounder.pepperfish.net (flounder.pepperfish.net [89.238.129.35])
        by brevard.conman.org (Postfix) with ESMTP id 5A42B2EA4CD4
        for <sean@conman.org>; Fri, 26 Oct 2012 13:40:09 -0400 (EDT)
Received: from localhost ([127.0.0.1] helo=octopus.pepperfish.net)
        by flounder.pepperfish.net with esmtp (Exim 4.71 #1 (Debian))
        id 1TRnsU-0002zj-JT; Fri, 26 Oct 2012 18:39:26 +0100
Received: from mail-la0-f44.google.com ([209.85.215.44])
        by flounder.pepperfish.net with esmtps (Exim 4.71 #1 (Debian))
        id 1TRnsR-0002yl-Ft
        for <lua-l@lists.lua.org>; Fri, 26 Oct 2012 18:39:23 +0100
Received: by mail-la0-f44.google.com with SMTP id b11so2862558lam.31
        for <lua-l@lists.lua.org>; Fri, 26 Oct 2012 10:40:01 -0700 (PDT)

Body
]]


TEST1 = [[
Return-Path: <lua-l-bounces@lists.lua.org>
Received: from flounder.pepperfish.net (flounder.pepperfish.net [89.238.129.35])
        by brevard.conman.org (Postfix) with ESMTP id 5A42B2EA4CD4
        for <sean@conman.org>; Fri, 26 Oct 2012 13:40:09 -0400 (EDT)
Received: from localhost ([127.0.0.1] helo=octopus.pepperfish.net)
        by flounder.pepperfish.net with esmtp (Exim 4.71 #1 (Debian))
        id 1TRnsU-0002zj-JT; Fri, 26 Oct 2012 18:39:26 +0100
Received: from mail-la0-f44.google.com ([209.85.215.44])
        by flounder.pepperfish.net with esmtps (Exim 4.71 #1 (Debian))
        id 1TRnsR-0002yl-Ft
        for <lua-l@lists.lua.org>; Fri, 26 Oct 2012 18:39:23 +0100
Received: by mail-la0-f44.google.com with SMTP id b11so2862558lam.31
        for <lua-l@lists.lua.org>; Fri, 26 Oct 2012 10:40:01 -0700 (PDT)
From: Sean Conner <spc (I am the greatest) @conman.org>, 
	Sean Hoade <hoade@gmail.com>,
	(Fred Smith) fred@example.net
Sender: Sean Conner <spc@conman.org>
Reply-To: Sean Hoade <hoade@gmail.com>,
	(Fred Smith) fred@example.net,
	blender-children: 
		Sean Conner <spc@conman.org>,
		Bill (Hogweed) Lefler <lefler@lefler.com>,
		Sean (DemiGod) Williams <sean (I AM GOD) @ seanwillams.com>,
		Mark (the Bastard) Hamzy <mark@bastard.hamzy.com> ;,
	sunday-gamers:
		Tom <tom@tom.com>,
		Keith <keith@gamers.com>,
		Jeff <jeff@gamers.com>
		;,misc@hello.com,
	undisclosed-recipients:;
Date: Thu, 25 Oct 2012 15:58:07 -0500 (EDT)
Subject: this is a test
Comment: This is another test
Keywords: one,(2) two,three (3),four,"five,eight",six
Message-ID: <001201cdb2f4$7a32db10$72ec7769@cristian7jjm>
In-Reply-To: <508AC779.4040101@gmail.com>
References: <508A971B.4010907@gmail.com>
        <CAFkDaoRmnONOM+Cu1VKhVzzhZ_QtT+TW3Q853n+eeR2WoBg8jQ@mail.gmail.com>
        <CAAZ=BVb59PrVzJroysr+yWUKeamE5pk9Rjt=NZHdskoDMKgabQ@mail.gmail.com>
        <508AC779.4040101@gmail.com>

This is the body of the text
]]

TEST2 = [[
Subject: This is a
	test of the subject line
Date: 25 Oct 2012 15:58:07 -0500 (EDT)
Comment: Another lone line
 of text
Keywords: one , two , three , four , five (this is a comment)
 , six , seven , eight , "nine , ten\" wow!" , eleven

The body of the text
]]

TEST3 = [[
Subject: this is a test
Date: 25 Oct 2012 15:58:07 -0500
Subject: this is another test
Comment: Another one bites the dust
Comment: and another one bites, and another one bites
Keywords: one, two, three, four
Keywords: five, six,seven,eight

Body
]]

dump("test1",email:match(TEST1))
--dump("test2",email:match(TEST2))
--dump("test3",email:match(TEST3))
