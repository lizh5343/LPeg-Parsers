
local dump = require "org.conman.table".dump
local lpeg = require "lpeg"
local re   = require "re"

local P  = lpeg.P
local S  = lpeg.S
local R  = lpeg.R
local V  = lpeg.V
local Cf = lpeg.Cf
local Ct = lpeg.Ct

-- ***********************************************************************

local function doset(t,i)

  local function append(t,l)
    if type(l) == 'table' and #l > 0 then
      for i = 1 , #l do
        t[#t + 1] = l[i]
      end
    else
      t[#t + 1] = l
    end
  end

  for name,value in pairs(i) do
    if t[name] == nil then
      t[name] = value
    elseif type(t[name]) == 'table' then
      append(t[name],value)
    else
      local r = { t[name] }
      append(r,value)
      t[name] = r
    end
  end
  return t
end

-- *******************************************************************

local VCHAR      = R"!~"
local WSP        = S" \t"
local SP         = P" "
local CRLF       = P"\r"^-1 * P"\n"
local ctext      = R("!'" , "*[" , "]~")
local qtext      = R("!!" , "#[" , "]~")
local dtext      = R("!Z" , "^!")
local theheaders = Cf(Ct"" * V"headers"^1,doset) * CRLF

-- ********************************************************************

G = --[[ lpeg/re ]] [[

email		<- %theheaders
headers		<- 
		   {:date:        datehdr        :} -> {}	-- RFC-5322
		/  {:subject:     subjecthdr     :} -> {}	-- RFC-5322
		/  {:comment:     commenthdr     :} -> {}	-- RFC-5322
		/  {:keywords:    keywordshdr    :} -> {}	-- RFC-5322
		/  {:message_id:  message_idhdr  :} -> {}	-- RFC-5322
		/  {:in_reply_to: in_reply_tohdr :} -> {}	-- RFC-5322
		/  {:references:  referenceshdr  :} -> {}	-- RFC-5322

datehdr		<- DATE        ':' date_time -> {}         %CRLF
subjecthdr	<- SUBJECT     ':' unstructured => cleanup %CRLF
commenthdr	<- COMMENT     ':' unstructured => cleanup %CRLF
keywordshdr	<- KEYWORDS    ':' ( (phrase (',' phrase)* ) ) -> {} %CRLF
message_idhdr	<- MESSAGE_ID  ':' msg_id        %CRLF
in_reply_tohdr	<- IN_REPLY_TO ':' msg_id+ -> {} %CRLF
referenceshdr	<- REFERENCES  ':' msg_id+ -> {} %CRLF

msg_id		<- CFWS? "<" { id_left "@" id_right } ">" CFWS?
id_left		<- dot_atom_text
id_right	<- dot_atom_text / no_fold_literal
no_fold_literal	<- "[" %dtext* "]"

date_time	<- ( {:weekday: day_of_week :} "," )? thedate time CFWS?
day_of_week	<- FWS { day_name }
day_name	<- 'Mon' / 'Tue' / 'Wed' / 'Thu' / 'Fri' / 'Sat' / 'Sun'
thedate		<- day month year
day		<- FWS {:day: %d^+1 -> tonumber :} FWS
month		<- {:month: 
		   ( 
			'Jan' / 'Feb' / 'Mar' / 'Apr' 
		      / 'May' / 'Jun' / 'Jul' / 'Aug' 
		      / 'Sep' / 'Oct' / 'Nov' / 'Dec'
		   ) -> monthtrans :}
year		<- FWS {:year: %d^4 -> tonumber :} FWS
time		<- time_of_day zone
time_of_day	<- hour ":" min (":" second)?
hour		<- {:hour: %d%d -> tonumber :}
min		<- {:min:  %d%d -> tonumber :}
second		<- {:sec:  %d%d -> tonumber :}
zone		<- FWS {:zone: (("+" / "-") %d^4) -> tonumber :}

unstructured	<- FWS? { (FWS? %VCHAR)* } %WSP*
phrase		<- word+
word		<- atom / quoted_string

quoted_string	<- CFWS? '"' ((FWS? qcontent)* => cleanup) FWS? '"' CFWS?
qcontent	<- %qtext / quoted_pair
quoted_pair	<- "\" (%VCHAR / %WSP)

atom		<- CFWS? {atext+} CFWS?

atext		<- [A-Za-z]
		/  [0-9]
		/  "!"
		/  "#"
		/  "$"
		/  "%"
		/  "&"
		/  "'"
		/  "*"
		/  "+"
		/  "-"
		/  "/"
		/  "="
		/  "?"
		/  "^"
		/  "_"
		/  "`"
		/  "{"
		/  "|"
		/  "}"
		/  "~"

dot_atom_text	<- atext+ ('.' atext+)*
dot_atom	<- CFWS? dot_atom_text CFWS?
FWS		<- (%WSP* %CRLF)? %WSP+
CFWS		<- (FWS? comment)? FWS?
		/  FWS
comment		<- "(" (FWS? ccontent)* FWS? ")"
ccontent	<- %ctext / quoted_pair / comment

DATE		<- [Dd][Aa][Tt][Ee]
SUBJECT		<- [Ss][Uu][Bb][Jj][Ee][Cc][Tt]
TO		<- [Tt][Oo]
REPLY_TO	<- [Rr][Ee][Pp][Ll][Yy] "-" TO
COMMENT		<- [Cc][Oo][Mm][Mm][Ee][Nn][Tt]
KEYWORDS	<- [Kk][Ee][Yy][Ww][Oo][Rr][Dd][Ss]
MESSAGE_ID	<- [Mm][Ee][Ss][Ss][Aa][Gg][Ee] "-" [Ii][Dd]
IN_REPLY_TO	<- [Ii][Nn] "-" REPLY_TO
REFERENCES	<- [Rr][Ee][Ff][Ee][Rr][Ee][Nn][Cc][Ee][Ss]
]]

R =
{
  VCHAR      = VCHAR,
  WSP        = WSP,
  SP         = SP,
  CRLF       = CRLF,
  ctext      = ctext,
  qtext      = qtext,
  dtext      = dtext,
  theheaders = theheaders,

  tonumber = tonumber,
  
  monthtrans = function(cap)
    local trans =
    {
      Jan = 1 , Feb =  2 , Mar =  3 , Apr =  4 ,
      May = 5 , Jun =  6 , Jul =  7 , Aug =  8 ,
      Sep = 9 , Oct = 10 , Nov = 11 , Dec = 12
    }
    
    return trans[cap]
  end,
  
  cleanup = function(subject,position,capture)
    local new = capture:gsub("\n","")
    new = new:gsub([[\.]],function(x) return x:sub(2,2) end)
    new = new:gsub("\t"," ")
    return position,new
  end,

  ddt = function(s,p,c)
    print(">>>",p,c)
    return p
  end,
};

email = re.compile(G,R)

-- **********************************************************************

TEST1 = [[
Date: Thu, 25 Oct 2012 15:58:07 -0500 (EDT)
Subject: this is a test
Comment: This is another test
Keywords: one,(2) two,three (3),four,"five,eight",six
Message-ID: <001201cdb2f4$7a32db10$72ec7769@cristian7jjm>
In-Reply-To: <508AC779.4040101@gmail.com>
References: <508A971B.4010907@gmail.com>
        <CAFkDaoRmnONOM+Cu1VKhVzzhZ_QtT+TW3Q853n+eeR2WoBg8jQ@mail.gmail.com>
        <CAAZ=BVb59PrVzJroysr+yWUKeamE5pk9Rjt=NZHdskoDMKgabQ@mail.gmail.com>
        <508AC779.4040101@gmail.com>

This is the body of the text
]]

TEST2 = [[
Subject: This is a
	test of the subject line
Date: 25 Oct 2012 15:58:07 -0500 (EDT)
Comment: Another lone line
 of text
Keywords: one , two , three , four , five (this is a comment)
 , six , seven , eight , "nine , ten\" wow!" , eleven

The body of the text
]]

TEST3 = [[
Subject: this is a test
Date: 25 Oct 2012 15:58:07 -0500
Subject: this is another test
Comment: Another one bites the dust
Comment: and another one bites, and another one bites
Keywords: one, two, three, four
Keywords: five, six,seven,eight

Body
]]

dump("test1",email:match(TEST1))
--dump("test2",email:match(TEST2))
--dump("test3",email:match(TEST3))
